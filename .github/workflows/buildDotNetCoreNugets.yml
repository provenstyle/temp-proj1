name: Build .NET Core Nugets

on: [push, pull_request]

env:
  BRANCH:             "${{ github.ref }}"

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.2
      with:
          versionSpec: '5.2.x'

    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.2

    - name: Set Variables
      run: |
        PACKAGES="Miruken.Package1,Miruken.Package2"

        if [ $BRANCH != "refs/heads/master" ]
        then
          echo "::set-env name=PRERELEASE       ::true"
          echo "::set-env name=CONFIGURATION    ::Debug"
          echo "::set-env name=NUGET_REPO       ::http://localhost:8081/repository/Nuget-Prerelease/"
          echo "::set-env name=API_KEY          ::${{ secrets.PRERELEASE_NUGET_API_KEY }}"
          echo "::set-env name=NUGET_VERSION    ::${{ steps.gitversion.outputs.informationalVersion }}"
        else
          echo "::set-env name=RELEASE          ::true"
          echo "::set-env name=CONFIGURATION    ::Release"
          echo "::set-env name=NUGET_REPO       ::http://localhost:8081/repository/Nuget-Release/"
          echo "::set-env name=API_KEY          :: ${{ secrets.RELEASE_NUGET_API_KEY }}"
          echo "::set-env name=NUGET_VERSION    ::${{ steps.gitversion.outputs.semVer }}"
        fi

          echo "::set-env name=ASSEMBLY_VERSION ::${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "::set-env name=PACKAGES         ::$PACKAGES"

    - name: List Variables
      run: |
        echo "PRERELEASE:       $PRERELEASE"
        echo "CONFIGURATION:    $CONFIGURATION"
        echo "NUGET_REPO:       $NUGET_REPO"
        echo "API_KEY:          $API_KEY"
        echo "NUGET_VERSION:    $NUGET_VERSION"
        echo "ASSEMBLY_VERSION: $ASSEMBLY_VERSION"
        echo "PACKAGES:         $PACKAGES"

        IFS="," read -ra PACKAGES <<< $PACKAGES
        for PACKAGE in "${PACKAGES[@]}"
          do
            echo "  $PACKAGE"
          done

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    - name: Build
      run: | 
        dotnet build --configuration $CONFIGURATION -p:Version=$ASSEMBLY_VERSION -p:DebugType=portable

    - name: Test
      run: dotnet test --no-build --no-restore --verbosity normal

    - name: Pack Nugets
      run: dotnet pack -p:PackageVersion=$NUGET_VERSION -p:SymbolPackageFormat=snupkg --include-symbols --no-build

    - name: Upload Nuget
      run: |
        pwd
        ls
        
        IFS="," read -ra PACKAGES <<< $PACKAGES
        for PACKAGE in "${PACKAGES[@]}"
          do
            PACKAGE_PATH="${PACKAGE}/bin/${CONFIGURATION}/${PACKAGE}.${?}.nupkg"
            echo "$PACKAGE_PATH"
            dotnet nuget push $PACKAGE_PATH --api-key $API_KEY --source $NUGET_REPO
          done

    - name: Tag Release Build 
      if: env.RELEASE == 'true' 
      run: |
        TAG="${{ steps.gitversion.outputs.semVer }}"
        git tag $tag
        git push origin $tag


